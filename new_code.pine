// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © boitoki

//@version=5
indicator('FX Market Sessions', overlay=true, max_boxes_count=500, max_labels_count=500, max_lines_count=500, max_bars_back=1000)

g1 = 'Session #1'
g2 = 'Session #2'
g3 = 'Session #3'
g4 = 'Box style'
g6 = 'Label style'
g5 = 'Opening Range'

///////////////
// Defined
///////////////
bool show = timeframe.isintraday and timeframe.multiplier <= 60 and timeframe.multiplier >= 1
int lookback = 12 * 60
color nonecolor = color.new(color.black, 100)
float pips = syminfo.mintick * 10

///////////////
// Inputs
///////////////
// Timezone
i_tz = input.string('GMT-4', title='Timezone', tooltip='e.g. \'America/New_York\', \'Asia/Tokyo\', \'GMT-4\', \'GMT+9\'...', group='General')
i_show_history = input.string('Yes', 'History', options=['Yes', 'No'], group="General") == 'Yes'

// Sessions
i_show_sess1 = input.bool(true, 'Show', group=g1) and show
i_sess1 = input.session('0400-1300', 'Session 1 - Time', group=g1)
i_sess1_label = input.string('London', 'Session 1 - Label', group=g1)
i_sess1_color = input.color(color.blue, 'Session 1 - Color', group=g1)
i_sess1_extend = input.string('No', 'Session 1 - Extend', options=['No', 'Extend + End line', 'Extend'], group=g1)
i_sess1_fib = input.string('No', 'Session 1 - Fibonacci Lines', group=g1, options=['Yes', 'No'], tooltip='Experimental feature') != 'No'
i_sess1_op = input.string('No', 'Session 1 - Opening Range', group=g1, options=['Yes', 'No']) != 'No' and show

i_show_sess2 = input.bool(true, 'Show', group=g2) and show
i_sess2 = input.session('0900-1700', 'Session 2 - Time', group=g2)
i_sess2_label = input.string('NewYork', 'Session 2 - Label', group=g2)
i_sess2_color = input.color(color.green, 'Session 2 - Color', group=g2)
i_sess2_extend = input.string('No', 'Session 2 - Extend', options=['No', 'Extend + End line', 'Extend'], group=g2)
i_sess2_fib = input.string('No', 'Session 2 - Fibonacci Lines', group=g2, options=['Yes', 'No'], tooltip='Experimental feature') != 'No'
i_sess2_op = input.string('No', 'Session 2 - Opening Range', group=g2, options=['Yes', 'No']) != 'No' and show

i_show_sess3 = input.bool(true, 'Show', group=g3) and show
i_sess3 = input.session('2000-0200', 'Session 3 - Time', group=g3)
i_sess3_label = input.string('Tokyo', 'Session 3 - Label', group=g3)
i_sess3_color = input.color(color.maroon, 'Session 3 - Color', group=g3)
i_sess3_extend = input.string('No', 'Session 3 - Extends', options=['No', 'Extend + End line', 'Extend'], group=g3)
i_sess3_fib = input.string('No', 'Session 3 - Fibonacci Lines', group=g3, options=['Yes', 'No'], tooltip='Experimental feature') != 'No'
i_sess3_op = input.string('No', 'Session 3 - Opening Range', group=g3, options=['Yes', 'No']) != 'No' and show

// Show & Styles
i_sess_border_style = input.string(line.style_dashed, 'Line style', options=[line.style_solid, line.style_dotted, line.style_dashed], group=g4)
i_sess_border_width = input.int(1, 'Line width', minval=1, group=g4)
i_sess_bgopacity = input.int(94, 'Background opacity', minval=0, maxval=100, step=1, group=g4, tooltip='Setting the 100 is no background color')

// Labels
i_label_show = input.bool(true, 'Labels', group=g6) and show
i_label_size = input.string(size.normal, 'Size', options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group=g6)
i_label_position = input.string('Inside', 'Position', options=['Inside', 'Outside'], group=g6) == 'Inside' ? label.style_label_upper_left : label.style_label_lower_left
i_label_chg = input.string("No", "Change value", options=["No", "Yes", "Yes(pips)"], group=g6)

// Opening Range
i_o_minutes = input.int(15, title='Lookback (minutes)', minval=1, step=1, tooltip='Minutes', group=g5)
i_o_opacity = input.int(74, title='Background opacity', minval=0, maxval=100, step=1, group=g5)


// Alerts
i_alert1_show = input.bool(false, 'Alerts - Sessions stard/end', group='Alerts')
i_alert2_show = input.bool(false, 'Alerts - Opening range breakouts', group='Alerts')


///////////////
// Functions
///////////////
get_time_by_bar(bar_count) => timeframe.multiplier * bar_count * 60 * 1000

get_period (_session, _start, _lookback) =>
    result = _start
    for i = _start to _lookback
        if na(_session[i+1]) and _session[i]
            result := i
            break
    result

is_start (_session) => na(_session[1]) and _session

is_end (_session) => na(_session) and _session[1]


// ------------------------
// Drawing labels
// ------------------------
chg_format = '{0,number,#.#####}'
pip_format = '{0,number,#.#}'
draw_label (_show, _session, _is_started, _color, _top, _bottom, _text, _delete_history) =>
    var label my_label = na
    label_text = array.new_string(1, _text)

    chg = _top - _bottom
    chg_text = i_label_chg == 'Yes' 
      ? str.format(chg_format, chg)
      : str.format(pip_format, chg / pips)

    if i_label_chg != 'No'
        array.push(label_text, chg_text)

    if _show
        if _is_started
            my_label := label.new(time, _top, array.join(label_text, '・'), textcolor=_color, color=nonecolor, size=i_label_size, style=i_label_position, xloc=xloc.bar_time)
            
            if _delete_history
                label.delete(my_label[1])

        if _session
            label.set_y(my_label, _top)
            label.set_text(my_label, array.join(label_text, '・'))

// ------------------------
// Drawing fibonacci lines
// ------------------------
draw_fib (_show, _session, _is_started, _color, _top, _bottom, _level, _width, _is_extend, _delete_history) =>
    var line my_line = na
    y = (_top - _bottom) * _level + _bottom

    if _show
        if _is_started
            my_line := line.new(time, y, time, y, width=_width, color=color.new(_color, 30), xloc=xloc.bar_time)

            if _is_extend
                line.set_extend(my_line, extend.right)

            if _delete_history
                line.delete(my_line[1])

        if _session
            line.set_x2(my_line, time + get_time_by_bar(1))
            line.set_y1(my_line, y)
            line.set_y2(my_line, y)


// ------------------------
// Drawing Opening range
// ------------------------
draw_op (_show, _session, _is_started, _color, _max, _is_extend, _delete_history) =>
    var int x1 = na
    var box my_box = na
    top = ta.highest(high, _max)
    bottom = ta.lowest(low, _max)
    is_crossover = ta.crossover(close, box.get_top(my_box))
    is_crossunder = ta.crossunder(close, box.get_bottom(my_box))
    
    if _show
        if _is_started
            x1 := time
            my_box := na

            if _delete_history
                box.delete(my_box[1])
                my_box

        if _session
            is_op = x1 + (i_o_minutes * 60 * 1000)
            
            if time >= is_op and time < is_op + get_time_by_bar(1)
                my_box := box.new(x1, top, time, bottom, xloc=xloc.bar_time, border_width=0, bgcolor=color.new(_color, i_o_opacity))

                if _is_extend
                    box.set_extend(my_box, extend.right)
                    my_box

            else
                box.set_right(my_box, time + get_time_by_bar(1))

                if is_crossover
                    alert('Price crossed over the opening range', alert.freq_once_per_bar)

                    if i_alert2_show
                        label.new(bar_index, na, "Bo", color=color.blue, style=label.style_label_down, yloc=yloc.abovebar)

                if is_crossunder
                    alert('Price crossed under the opening range', alert.freq_once_per_bar)

                    if i_alert2_show
                        label.new(bar_index, na, "Bo", color=color.red, style=label.style_label_up, yloc=yloc.belowbar)

                my_box

// ------------------------
// Drawing market
// ------------------------
draw_market (_show, _session, _is_started, _color, _top, _bottom, _extend, _is_extend, _delete_history) =>
    var box my_box = na
    should_draw_endline = (not _is_extend) or (_extend == 'Extend + End line')

    if _show
        // Start
        if _is_started
            my_box := box.new(time, _top, time, _bottom, xloc=xloc.bar_time)
            box.set_border_style(my_box, i_sess_border_style)
            box.set_border_width(my_box, i_sess_border_width)
            box.set_border_color(my_box, _color)
            box.set_bgcolor(my_box, color.new(_color, i_sess_bgopacity))

            if _is_extend
                box.set_extend(my_box, extend.right)

            if _delete_history
                box.delete(my_box[1])
    
        // Proccesing
        if _session
            box.set_top(my_box, _top)
            box.set_bottom(my_box, _bottom)

            if should_draw_endline
                box.set_right(my_box, time + get_time_by_bar(1))
    

// ------------------------
// Drawing
// ------------------------
draw (_show, _session, _color, _label, _extend, _show_fib, _show_op, _lookback) =>
    max = get_period(_session, 1, _lookback)
    top = ta.highest(high, max)
    bottom = ta.lowest(low, max)
    
    is_started = is_start(_session)
    is_ended = is_end(_session)
    is_extend = _extend != 'No'

    delete_history = (not i_show_history) or is_extend

    draw_market(_show, _session, is_started, _color, top, bottom, _extend, is_extend, delete_history)
    
    if i_label_show
        draw_label(_show, _session, is_started, _color, top, bottom, _label, delete_history)

    if _show_op
        draw_op(_show, _session, is_started, _color, max, is_extend, delete_history)

    if _show_fib
        draw_fib(_show, _session, is_started, _color, top, bottom, 0.500, 2, is_extend, delete_history)
        draw_fib(_show, _session, is_started, _color, top, bottom, 0.628, 1, is_extend, delete_history)
        draw_fib(_show, _session, is_started, _color, top, bottom, 0.382, 1, is_extend, delete_history)
    
    _session

///////////////////
// Calculating
///////////////////
string tz = (i_tz == 'No' or i_tz == '') ? na : i_tz
int sess1 = time(timeframe.period, i_sess1, tz)
int sess2 = time(timeframe.period, i_sess2, tz)
int sess3 = time(timeframe.period, i_sess3, tz)

///////////////////
// Plotting
///////////////////
is_sess1 = draw(i_show_sess1, sess1, i_sess1_color, i_sess1_label, i_sess1_extend, i_sess1_fib, i_sess1_op, lookback)
is_sess2 = draw(i_show_sess2, sess2, i_sess2_color, i_sess2_label, i_sess2_extend, i_sess2_fib, i_sess2_op, lookback)
is_sess3 = draw(i_show_sess3, sess3, i_sess3_color, i_sess3_label, i_sess3_extend, i_sess3_fib, i_sess3_op, lookback)


////////////////////
// Alerts
////////////////////
// Session alerts
bool sess1_started = is_sess1 and not is_sess1[1]
bool sess1_ended = not is_sess1 and is_sess1[1]
bool sess2_started = is_sess2 and not is_sess2[1]
bool sess2_ended = not is_sess2 and is_sess2[1]
bool sess3_started = is_sess3 and not is_sess3[1]
bool sess3_ended = not is_sess3 and is_sess3[1]

alertcondition(sess1_started, 'Session #1 started')
alertcondition(sess1_ended, 'Session #1 ended')
alertcondition(sess2_started, 'Session #2 started')
alertcondition(sess2_ended, 'Session #2 ended')
alertcondition(sess3_started, 'Session #3 started')
alertcondition(sess3_ended, 'Session #3 ended')

plotshape(i_alert1_show and sess1_started, color=i_sess1_color, text='Start', style=shape.labeldown, location=location.bottom, size=size.small, textcolor=color.new(color.white, 0))
plotshape(i_alert1_show and sess1_ended, color=i_sess1_color, text='End', style=shape.labeldown, location=location.bottom, size=size.small, textcolor=color.new(color.white, 0))
plotshape(i_alert1_show and sess2_started, color=i_sess2_color, text='Start', style=shape.labeldown, location=location.bottom, size=size.small, textcolor=color.new(color.white, 0))
plotshape(i_alert1_show and sess2_ended, color=i_sess2_color, text='End', style=shape.labeldown, location=location.bottom, size=size.small, textcolor=color.new(color.white, 0))
plotshape(i_alert1_show and sess3_started, color=i_sess3_color, text='Start', style=shape.labeldown, location=location.bottom, size=size.small, textcolor=color.new(color.white, 0))
plotshape(i_alert1_show and sess3_ended, color=i_sess3_color, text='End', style=shape.labeldown, location=location.bottom, size=size.small, textcolor=color.new(color.white, 0))
