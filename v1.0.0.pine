//@version=5
indicator('FX Market Sessions', overlay=true, max_boxes_count=500, max_labels_count=500, max_lines_count=500, max_bars_back=1500)

g1 = 'Session #1'
g2 = 'Session #2'
g3 = 'Session #3'
g4 = 'Boxes'
g6 = 'Labels'
g5 = 'Opening Range'

///////////////
// Defined
///////////////
bool SHOW = timeframe.isintraday and timeframe.multiplier <= 60 and timeframe.multiplier >= 1
int LOOKBACKMINS = 12 * 60
color NONECOLOR = color.new(color.black, 100)

///////////////
// Inputs
///////////////
// Timezone
string tz = input.string('GMT-4', title='Timezone', tooltip='e.g. \'America/New_York\', \'Asia/Tokyo\', \'GMT-4\', \'GMT+9\'...', group='Timezone')

// Sessions
bool show_sess1 = input.bool(true, 'Show', group=g1) and SHOW
string sess1Time = input.session('0400-1300', 'Session 1 - Time', group=g1)
string sess1Label = input.string('London', 'Session 1 - Label', group=g1)
color sess1Color = input.color(color.blue, 'Session 1 - Color', group=g1)
string sess1Extend = input.string('No', 'Session 1 - Extend', options=['No', 'Extend + End line', 'Extend'], group=g1)
bool sess1Fib = input.string('No', 'Session 1 - Fibonacci Lines', group=g1, options=['Yes', 'No'], tooltip='Experimental feature') != 'No'
bool sess1Oprg = input.string('No', 'Session 1 - Opening Range', group=g1, options=['Yes', 'No']) != 'No' and SHOW

bool show_sess2 = input.bool(true, 'Show', group=g2) and SHOW
string sess2Time = input.session('0900-1700', 'Session 2 - Time', group=g2)
string sess2Label = input.string('NewYork', 'Session 2 - Label', group=g2)
color sess2Color = input.color(color.green, 'Session 2 - Color', group=g2)
string sess2Extend = input.string('No', 'Session 2 - Extend', options=['No', 'Extend + End line', 'Extend'], group=g2)
bool sess2Fib = input.string('No', 'Session 2 - Fibonacci Lines', group=g2, options=['Yes', 'No'], tooltip='Experimental feature') != 'No'
bool sess2Oprg = input.string('No', 'Session 2 - Opening Range', group=g2, options=['Yes', 'No']) != 'No' and SHOW

bool show_sess3 = input.bool(true, 'Show', group=g3) and SHOW
string sess3Time = input.session('2000-0200', 'Session 3 - Time', group=g3)
string sess3Label = input.string('Tokyo', 'Session 3 - Label', group=g3)
color sess3Color = input.color(color.maroon, 'Session 3 - Color', group=g3)
string sess3Extend = input.string('No', 'Session 3 - Extends', options=['No', 'Extend + End line', 'Extend'], group=g3)
bool sess3Fib = input.string('No', 'Session 3 - Fibonacci Lines', group=g3, options=['Yes', 'No'], tooltip='Experimental feature') != 'No'
bool sess3Oprg = input.string('No', 'Session 3 - Opening Range', group=g3, options=['Yes', 'No']) != 'No' and SHOW

// Show & Styles
RECT_LINESTYLE = input.string(line.style_dashed, 'Line style', options=[line.style_solid, line.style_dotted, line.style_dashed], group=g4)
RECT_LINEWIDTH = input.int(1, 'Line width', minval=1, group=g4)
RECT_BGOPACITY = input.int(94, 'Background opacity', minval=0, maxval=100, step=1, group=g4, tooltip='Setting the 100 is no background color')
SHOW_HISTORY = input.string('Yes', 'History', options=['Yes', 'No'], group=g4) == 'Yes'

// Labels
bool show_label = input.bool(true, 'Show Labels', group=g6) and SHOW
RECT_LABELSIZE = input.string(size.normal, 'Size', options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group=g6)

// Opening Range
OPRG_LOOKBACKMINS = input.int(30, title='Opening Range Lookback', minval=1, step=1, tooltip='Minutes', group=g5)
OPRG_LOOKBACKBARS = int(math.floor(OPRG_LOOKBACKMINS / timeframe.multiplier))
OPRG_LINESTYLE = input.string(line.style_dotted, 'Opening Range Line Style', options=[line.style_solid, line.style_dotted, line.style_dashed], group=g5)
color c_oprg = input.color(color.silver, 'Opening Range - Color', group=g5)
OPRG_BGOPACITY = input.int(94, 'Opening Range - Background opacity', minval=0, maxval=100, step=1, group=g5)

///////////////////
// Functions
///////////////////
get_isInSession(session) =>
    not na(session)

get_xtime_by_bar(bar_count) =>
    timeframe.multiplier * bar_count * 60 * 1000

get_positions(_session, duration_) =>
    int max = math.round(duration_ / timeframe.multiplier)  // minutes to bar length
    int begin_index = 0

    for i = 1 to max by 1
        if not na(_session[i])
            begin_index += 1
            begin_index

    int to_index = math.max(begin_index, 1)
    int pR = bar_index
    int pL = bar_index - begin_index
    float pT = math.max(ta.highest(high[1], to_index), 0)
    float pB = math.min(ta.lowest(low[1], to_index), high)

    [pR, pL, pT, pB]

draw_oprg(start_, show_history_, top_, bottom_, show_) =>
    if show_
        var box my_box = na
        color bgcolor = color.new(c_oprg, OPRG_BGOPACITY)

        if start_
            my_box := box.new(bar_index, top_, bar_index, bottom_, border_width=1, border_style=OPRG_LINESTYLE, border_color=c_oprg, bgcolor=bgcolor)

            if not show_history_ or not SHOW_HISTORY
                box.delete(my_box[1])

        if top_
            box.set_right(my_box, bar_index)

        my_box

draw_rect(is_inSession_, show_, show_extend_, show_history_, left_, top_, bottom_, right_, extend_, col_) =>
    bool show_endline = extend_ == 'Extend + End line'
    string extendstyle = extend_ != 'No' ? extend.right : extend.none
    color bgcolor = RECT_BGOPACITY < 100 ? color.new(col_, RECT_BGOPACITY) : na

    if show_
        var box my_box = na

        if not is_inSession_[1]
            my_box := box.new(right_, top_, left_, bottom_, border_color=col_, border_width=RECT_LINEWIDTH, border_style=RECT_LINESTYLE, bgcolor=bgcolor)

            // Shouldn't show history
            if not show_history_ or show_extend_ or not SHOW_HISTORY
                box.delete(my_box[1])

            if show_extend_
                box.set_extend(my_box, extendstyle)

        if is_inSession_
            box.set_left(my_box, left_)
            box.set_top(my_box, top_)
            box.set_bottom(my_box, bottom_)
            box.set_right(my_box, right_)

            if show_extend_ and not show_endline
                box.set_right(my_box, left_)

draw_fib(is_inSession_, show_, show_extend_, show_history_, left_, top_, bottom_, right_, extend_, col_, level_, width_) =>
    string extendstyle = extend_ != 'No' ? extend.right : extend.none

    if show_
        var line my_line = na
        float y = bottom_ + (top_ - bottom_) * level_

        if not is_inSession_[1]
            my_line := line.new(left_, y, right_, y, width=width_, color=color.new(col_, 30))

            if not show_history_ or show_extend_ or not SHOW_HISTORY
                line.delete(my_line[1])

            if show_extend_
                line.set_extend(my_line, extendstyle)

        if is_inSession_
            line.set_y1(my_line, y)
            line.set_y2(my_line, y)
            line.set_x2(my_line, right_)

draw_label(is_inSession_, show_, show_extend_, show_history_, left_, top_, col_, labeltext_) =>
    if show_
        var label my_label = na

        if not is_inSession_[1]
            my_label := label.new(left_, top_, labeltext_, textcolor=col_, color=NONECOLOR, style=label.style_none, size=RECT_LABELSIZE)

            if not show_history_ or show_extend_ or not SHOW_HISTORY
                label.delete(my_label[1])

        if is_inSession_
            label.set_xy(my_label, left_, top_)

//draw_close (is_inSession_, left_, top_, bottom_, right_, col_) =>
//    var line a_ = na
//    var line b_ = na
//
//    if (not is_inSession_ and is_inSession_[1])
//        a_ := line.new(left_, top_, right_[1], bottom_, color=col_, style=RECT_LINESTYLE)
//        b_ := line.new(right_[1], top_, left_, bottom_, color=col_, style=RECT_LINESTYLE)
//
//    if not SHOW_HISTORY and (is_inSession_ and not is_inSession_[1])
//        line.delete(a_[1])
//        line.delete(b_[1])

draw(sessiontime_, left_, top_, bottom_, right_, labeltext_, col_, extend_is_, show_fib_, show_) =>
    bool is_inSession = get_isInSession(sessiontime_)
    bool show_rect = show_ and is_inSession
    bool show_extend = not(extend_is_ == 'No')
    bool show_history = not show_extend
    bool show_label_ = show_rect and show_label
    bool show_fib = show_rect and show_fib_

    draw_rect(is_inSession, show_rect, show_extend, show_history, left_, top_, bottom_, right_, extend_is_, col_)
    draw_label(is_inSession, show_label_, show_extend, show_history, left_, top_, col_, labeltext_)
    draw_fib(is_inSession, show_fib, show_extend, show_history, left_, top_, bottom_, right_, extend_is_, col_, 0.5, 2)
    draw_fib(is_inSession, show_fib, show_extend, show_history, left_, top_, bottom_, right_, extend_is_, col_, 0.618, 1)
    draw_fib(is_inSession, show_fib, show_extend, show_history, left_, top_, bottom_, right_, extend_is_, col_, 0.382, 1)
    //draw_close(is_inSession, left_, top_, bottom_, right_, col_)

    is_inSession


///////////////////
// Calculating
///////////////////
tz := tz == 'No' or tz == '' ? na : tz
int sess1 = time(timeframe.period, sess1Time, tz)
int sess2 = time(timeframe.period, sess2Time, tz)
int sess3 = time(timeframe.period, sess3Time, tz)

// (Opening Range)
bool sess1orcalc = sess1[OPRG_LOOKBACKBARS] and na(sess1[OPRG_LOOKBACKBARS + 1]) and sess1Oprg
bool sess2orcalc = sess2[OPRG_LOOKBACKBARS] and na(sess2[OPRG_LOOKBACKBARS + 1]) and sess2Oprg
bool sess3orcalc = sess3[OPRG_LOOKBACKBARS] and na(sess3[OPRG_LOOKBACKBARS + 1]) and sess3Oprg

float or1_h = na
float or1_l = na
or1_h := sess1 ? or1_h[1] : na
or1_l := sess1 ? or1_l[1] : na

if sess1orcalc
    for i = 0 to OPRG_LOOKBACKBARS by 1
        or1_h := i == 0 ? high : math.max(high[i], or1_h)
        or1_l := i == 0 ? low : math.min(low[i], or1_l)
        or1_l

float or2_h = na
float or2_l = na
or2_h := sess2 ? or2_h[1] : na
or2_l := sess2 ? or2_l[1] : na

if sess2orcalc
    for i = 0 to OPRG_LOOKBACKBARS by 1
        or2_h := i == 0 ? high : math.max(high[i], or2_h)
        or2_l := i == 0 ? low : math.min(low[i], or2_l)
        or2_l

float or3_h = na
float or3_l = na
or3_h := sess3 ? or3_h[1] : na
or3_l := sess3 ? or3_l[1] : na

if sess3orcalc
    for i = 0 to OPRG_LOOKBACKBARS by 1
        or3_h := i == 0 ? high : math.max(high[i], or3_h)
        or3_l := i == 0 ? low : math.min(low[i], or3_l)
        or3_l


///////////////////
// Plotting
///////////////////

// Opening ranges
draw_oprg(show_sess1 and sess1 and sess1orcalc, sess1Extend == 'No', or1_h, or1_l, sess1Oprg)
draw_oprg(show_sess2 and sess2 and sess2orcalc, sess2Extend == 'No', or2_h, or2_l, sess2Oprg)
draw_oprg(show_sess3 and sess3 and sess3orcalc, sess3Extend == 'No', or3_h, or3_l, sess3Oprg)

// Positions
[sess1R, sess1L, sess1T, sess1B] = get_positions(sess1, LOOKBACKMINS)
[sess2R, sess2L, sess2T, sess2B] = get_positions(sess2, LOOKBACKMINS)
[sess3R, sess3L, sess3T, sess3B] = get_positions(sess3, LOOKBACKMINS)

// Draw
isSess1 = draw(sess1, sess1L, sess1T, sess1B, sess1R, sess1Label, sess1Color, sess1Extend, sess1Fib, show_sess1)
isSess2 = draw(sess2, sess2L, sess2T, sess2B, sess2R, sess2Label, sess2Color, sess2Extend, sess2Fib, show_sess2)
isSess3 = draw(sess3, sess3L, sess3T, sess3B, sess3R, sess3Label, sess3Color, sess3Extend, sess3Fib, show_sess3)


////////////////////
// Alerts
////////////////////
// inputs
bool show_alert1 = input.bool(false, 'Show Alerts - Sessions', group='Alerts')
bool show_alert2 = input.bool(false, 'Show Alerts - Opening range breakouts', group='Alerts')


// Session alerts
bool session1Started = isSess1 and not isSess1[1]
bool session1Ended = not isSess1 and isSess1[1]
bool session2Started = isSess2 and not isSess2[1]
bool session2Ended = not isSess2 and isSess2[1]
bool session3Started = isSess3 and not isSess3[1]
bool session3Ended = not isSess3 and isSess3[1]

alertcondition(session1Started, 'Session #1 started')
alertcondition(session1Ended, 'Session #1 ended')
alertcondition(session2Started, 'Session #2 started')
alertcondition(session2Ended, 'Session #2 ended')
alertcondition(session3Started, 'Session #3 started')
alertcondition(session3Ended, 'Session #3 ended')

plotshape(show_alert1 and session1Started, color=sess1Color, text='Start', style=shape.labeldown, location=location.bottom, size=size.small, textcolor=color.new(color.white, 0))
plotshape(show_alert1 and session1Ended, color=sess1Color, text='End', style=shape.labeldown, location=location.bottom, size=size.small, textcolor=color.new(color.white, 0))
plotshape(show_alert1 and session2Started, color=sess2Color, text='Start', style=shape.labeldown, location=location.bottom, size=size.small, textcolor=color.new(color.white, 0))
plotshape(show_alert1 and session2Ended, color=sess2Color, text='End', style=shape.labeldown, location=location.bottom, size=size.small, textcolor=color.new(color.white, 0))
plotshape(show_alert1 and session3Started, color=sess3Color, text='Start', style=shape.labeldown, location=location.bottom, size=size.small, textcolor=color.new(color.white, 0))
plotshape(show_alert1 and session3Ended, color=sess3Color, text='End', style=shape.labeldown, location=location.bottom, size=size.small, textcolor=color.new(color.white, 0))

// Opening range alerts
orBullishBreakout(t) =>
    close > t and t > open
orBearishBreakout(t) =>
    close < t and t < open

bool orBullishBreakout1 = orBullishBreakout(or1_h)
bool orBearishBreakout1 = orBearishBreakout(or1_l)
bool orBullishBreakout2 = orBullishBreakout(or2_h)
bool orBearishBreakout2 = orBearishBreakout(or2_l)
bool orBullishBreakout3 = orBullishBreakout(or3_h)
bool orBearishBreakout3 = orBearishBreakout(or3_l)

alertcondition(orBullishBreakout1 or orBearishBreakout1, 'Session #1 Opening Breakout')
alertcondition(orBullishBreakout2 or orBearishBreakout2, 'Session #2 Opening Breakout')
alertcondition(orBullishBreakout3 or orBearishBreakout3, 'Session #3 Opening Breakout')

plotshape(show_alert2 and (orBullishBreakout1 and show_sess1 or orBullishBreakout2 and show_sess2 or orBullishBreakout3 and show_sess3), text='Bull', style=shape.labeldown, color=color.new(color.green, 0), textcolor=color.new(color.white, 0), location=location.abovebar)
plotshape(show_alert2 and (orBearishBreakout1 and show_sess1 or orBearishBreakout2 and show_sess2 or orBearishBreakout3 and show_sess3), text='Bear', style=shape.labelup, color=color.new(color.red, 0), textcolor=color.new(color.white, 0), location=location.belowbar)

